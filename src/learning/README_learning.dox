/**
 \dir learning
 @brief Tools for machine learning on tensegrity structures.
  
 \page learning Learning
 \tableofcontents
 \section mainlearn Learning Library
 Contains an evolution scheme that can be configured for MonteCarlo,
 gaussian sampling or simulated annealing. Also contains adapters to
 read parameters in and out of evolution objects, and a class to
 read a simulation configuration from a .ini text file
 
  \section adapters Adapters
  A class that passes parameters between AnnealEvolution and a controller.
  Parameters are scaled 0.0 to 1.0, so will need to be scaled to their
  relevant ranges in the controllers.
  Depends upon both AnnealEvolution and Configuration
  
  \section annealevo Anneal Evolution
  Learning is overseen by AnnealEvolution. AnnealEvoMember and
  AnnealEvoPopulation contain sets of parameters and are modified
  according to the style of evolution. A detailed explanation of how
  to configure the .ini files is available on \ref config_full
  
  \section config_breif Configuration
  Configuration parameters depend on the specific learning applicaiton,
  but always map keys to integer or double values. See \ref config_full
  for details on the parameters for \ref annealevo
  
  \version 1.0.0 (beta)
*/

/**
 \page config_full Configuration Parameters
 The configuration library allows for users to specify string keys that
 relate to double or integer values specified in a Config.ini file, such
 that relevant parameters can be read from a text file. In version 1.0.0
 this is used exclusivly for machine learning. The parameters in the
 included config files are explained below:
 \section sup_params Parameters
	For binary parameters - 0 is "off" 1 is "on"
 \subsection learn_param_1 Startup Parameters
	- learning: if learning is off, it loads from the file logs/bestParameters-<argv>.prm
	The default is logs/bestParameters-default.prm
	- startSeed: Whether or not to 'seed' the population with the data
	from bestParameters. Good for resuming a run or changing learning
	modes.
 \subsection learn_param_2 Controller parameters
	- numberOfActions: The number of parameters in a "unit" of the system.
	For example, the CPGEdges have two: weight and phase
	- numberOfControllers: Number of units in the system.
 \subsection learn_param_3 Learning Parameters
	- coevolution: Coevolution on selects a random element from the pool. Off ensures
	all elements are tested. Off is better with max score, on is better
	with average
	- populationSize: Number of controllers in the population. Allows for
	genetic algorithms to be used.
	- numberOfElementsToMutate: Number of elements to mutate between each
	generation
	- numberOfTestsBetweenGenerations: Number of tests between run between
	mutiations. Only used if coevolution is on, otherwise test all new controllers
	- leniencyCoef: How much past scores are factored in. 1.0 considers the current score
	- MonteCarlo: If on, parameters will be chosen in a flat random between 0.0 and 1.0. AnnealEvolution only
	- deviation: How large of a standard deviation to mutate by if MonteCarlo is off. AnnealEvolution only
	- compareAverageScores: Comparing the average scores over a number of previous 
	generations. Setting to 0 will compare maximum scores
	- clearScoresBetweenGenerations: Whether or not to clear scores between generations.
	If looking for a maximum, do not clear.
	
  \subsection learn_param_4 Neuro Learning Parameters
	- numberOfStates: Number of states for a neural network input
    - numberOfChildren: Number of population members to replace with "children"
    that combine the parameters of two neural networks. Can be used in combination
    with numberOfElements to mutate, as long as their sum is less than the population size.
    
	\section un_params Unsupported Parameters
	The following parameters are from an older version of the code,
	but are explained here since they are still in the .ini files
	or in case you are trying to use V 0.1 (not recommended generally)
	- graphics: Work around is to change 
	- brokenLink: Break one string
	- noise: Including noise into muscle control 
	- addObstacles: Terrain adjustment - can be adjusted with tgGround classes
	- addBumps: Terrain adjustment - can be adjusted with tgGround classes
	- addRandomTerrain: Terrain adjustment - can be adjusted with tgGround classes
	- addSlope: Terrain adjustment - can be adjusted with tgGround classes
	- recordPositions: See version 0.1
	- numberOfMusclesPerController: See version 0.1
	- cycleDuration: See version 0.1
 
 \version 1.1.0
*/

/**
  \dir learning/Adapters
  @brief A class that passes parameters between AnnealEvolution and a controller
 
*/

/**
 \dir learning/AnnealEvolution
 @brief A library to perform a variety of evolution algorithms.
 */

/**
 \dir learning/Configuration
 @brief A class to read a learning configuration from a .ini file.
 */
